// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RapidPayChallenge.Data;

namespace RapidPayChallenge.Data.Migrations
{
    [DbContext(typeof(RapidPayDbContext))]
    [Migration("20240513235332_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RapidPayChallenge.Domain.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("96b367bf-a0c9-41e0-9ae6-3d926b0d9e79"),
                            Email = "admin@rapidpay.com",
                            FirstName = "Admin",
                            LastName = "RapidPay",
                            Pass = "$2a$10$uhdpoXj4ruSD4Zh8DbURJuAqVM4LIs2oLCo5Bej31462lqr7tegWm"
                        },
                        new
                        {
                            Id = new Guid("05b23ed2-4883-4e09-8ae0-00edb02818eb"),
                            Email = "dcarias@rapidpay.com",
                            FirstName = "Daniel",
                            LastName = "Carias",
                            Pass = "$2a$10$cwsIm3osBPHVtApOf4IV8eYLiYDELtklykGAvqlJrca/KZ29LWNOG"
                        });
                });

            modelBuilder.Entity("RapidPayChallenge.Domain.Models.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CVC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpMonth")
                        .HasColumnType("int");

                    b.Property<int>("ExpYear")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9cd80e88-9646-44b7-ac64-62238f4e13ec"),
                            AccountId = new Guid("05b23ed2-4883-4e09-8ae0-00edb02818eb"),
                            Balance = 10000m,
                            CVC = "481",
                            ExpMonth = 12,
                            ExpYear = 2026,
                            Number = "4228567262279934"
                        });
                });

            modelBuilder.Entity("RapidPayChallenge.Domain.Models.PaymFee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("PaymFees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10a3d83b-67d2-498d-b535-6a668949da4f"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fee = 0.852918506065811m
                        });
                });

            modelBuilder.Entity("RapidPayChallenge.Domain.Models.Transac", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PaymFee")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("Transacs");
                });

            modelBuilder.Entity("RapidPayChallenge.Domain.Models.Card", b =>
                {
                    b.HasOne("RapidPayChallenge.Domain.Models.Account", "Account")
                        .WithMany("Cards")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("RapidPayChallenge.Domain.Models.Transac", b =>
                {
                    b.HasOne("RapidPayChallenge.Domain.Models.Card", "Card")
                        .WithMany("Transactions")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("RapidPayChallenge.Domain.Models.Account", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("RapidPayChallenge.Domain.Models.Card", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
